name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: maldreth_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-flask

    - name: Set up test environment
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/maldreth_test
        FLASK_ENV: testing
        SECRET_KEY: test-secret-key
      run: |
        python -c "from app import create_app, db; app = create_app(); app.app_context().push(); db.create_all()"

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/maldreth_test
        FLASK_ENV: testing
        SECRET_KEY: test-secret-key
      run: |
        pytest --cov=./ --cov-report=xml --cov-report=html -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Run Black formatter check
      run: black --check .
      continue-on-error: true

    - name: Run isort import checker
      run: isort --check-only .
      continue-on-error: true

    - name: Run Flake8 linter
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to Heroku Staging
      uses: akhileshns/heroku-deploy@v3.12.12
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME_STAGING }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        healthcheck: https://${{ secrets.HEROKU_APP_NAME_STAGING }}.herokuapp.com/health
        delay: 10
        rollbackonhealthcheckfailed: true

    - name: Set up Heroku CLI
      run: |
        curl https://cli-assets.heroku.com/install.sh | sh

    - name: Run database migrations
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: |
        heroku run python manage.py db upgrade --app ${{ secrets.HEROKU_APP_NAME_STAGING }}

    - name: Run smoke tests
      run: |
        sleep 10
        curl -f https://${{ secrets.HEROKU_APP_NAME_STAGING }}.herokuapp.com/health || exit 1
        curl -f https://${{ secrets.HEROKU_APP_NAME_STAGING }}.herokuapp.com/api/v2/stages || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to Heroku Production
      uses: akhileshns/heroku-deploy@v3.12.12
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME_PRODUCTION }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        healthcheck: https://${{ secrets.HEROKU_APP_NAME_PRODUCTION }}.herokuapp.com/health
        delay: 10
        rollbackonhealthcheckfailed: true

    - name: Set up Heroku CLI
      run: |
        curl https://cli-assets.heroku.com/install.sh | sh

    - name: Run database migrations
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: |
        heroku run python manage.py db upgrade --app ${{ secrets.HEROKU_APP_NAME_PRODUCTION }}
